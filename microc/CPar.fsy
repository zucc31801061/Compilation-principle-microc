%{
(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)
open Absyn

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10 //  \n 的 ASCII 码
%}

%token <int> CSTINT CSTBOOL  // <int> 是词元的语义值类型
%token <string> CSTSTRING NAME

%token CHAR ELSE IF INT NULL PRINT PRINTLN RETURN VOID WHILE FOR DO SWITCH CASE DEFAULT STRUCT BREAK CONTINUE MAX MIN IN RANGE
%token SELFPLUS SELFMINUS
%token PLUS MINUS TIMES DIV MOD BITLEFT BITRIGHT BITXOR BITOR
%token EQ NE GT LT GE LE
%token NOT SEQOR SEQAND BITNOT
%token LPAR RPAR LBRACE RBRACE LBRACK RBRACK SEMI COMMA ASSIGN AMP COLON QST PLUSASSIGN MINUSASSIGN TIMESASSIGN DIVASSIGN MODASSIGN
%token EOF

%right ASSIGN             /* lowest precedence */  // 最下面的优先级最高
%nonassoc PRINT
%left SEQOR
%left SEQAND
%left EQ NE 
%nonassoc GT LT GE LE
%left PLUS MINUS
%left TIMES DIV MOD 
%nonassoc PREINC PREDEC NOT AMP 
%nonassoc LBRACK          /* highest precedence  */

%start Main            // 语法开始符号
%type <Absyn.program> Main   // 开始符号，对应抽象语法树节点类型, program

%%

Main:
    Topdecs EOF                         { Prog $1 }  // { }内是合法的F#代码
                                        // $1 是 Topdecs的语义值， Prog $1 返回抽象语法树根节点，也就是整个程序
;                                       // 规则结束符

Topdecs:
    /* empty */                         { [] }
  | Topdec Topdecs                      { $1 :: $2 }
;

Topdec: 
    Vardec SEMI                         { Vardec (fst $1, snd $1) }
  | Fundec                              { $1 }
;

Vardec:
    Type Vardesc                        { ((fst $2) $1, snd $2) }
;

Vardesc:
    NAME                                { ((fun t -> t), $1)                      }
  | TIMES Vardesc                       { compose1 TypP $2                        }
  | LPAR Vardesc RPAR                   { $2                                      } 
  | Vardesc LBRACK RBRACK               { compose1 (fun t -> TypA(t, None)) $1    }
  | Vardesc LBRACK CSTINT RBRACK        { compose1 (fun t -> TypA(t, Some $3)) $1 }
;

Fundec:
    VOID NAME LPAR Paramdecs RPAR Block { Fundec(None,     $2, $4, $6) }
  | Type NAME LPAR Paramdecs RPAR Block { Fundec(Some($1), $2, $4, $6) }
;

Paramdecs:
    /* empty */                         { [] }
  | Paramdecs1                          { $1 }
;

Paramdecs1:
    Vardec                              { [$1]     }
  | Vardec COMMA Paramdecs1             { $1 :: $3 }
;

Block:
    LBRACE StmtOrDecSeq RBRACE          { Block $2 }
;

StmtOrDecSeq:
    /* empty */                         { [] }
  | Stmt StmtOrDecSeq                   { Stmt $1 :: $2 }
  | Vardec SEMI StmtOrDecSeq            { Dec (fst $1, snd $1) :: $3 }
  | Vardec ASSIGN Expr SEMI StmtOrDecSeq{ DecAssign (fst $1, snd $1, $3) :: $5 }
;

Stmt: 
    StmtM                               { $1 }
  | StmtU                               { $1 }
;

StmtM:  /* No unbalanced if-else */
    Expr SEMI                           { Expr($1)             }
  | RETURN SEMI                         { Return None          }
  | RETURN Expr SEMI                    { Return(Some($2))     }
  | Block                               { $1                   }
  | IF LPAR Expr RPAR StmtM ELSE StmtM  { If($3, $5, $7)       }
  | WHILE LPAR Expr RPAR StmtM          { While($3, $5)        }
  | FOR LPAR Expr SEMI Expr SEMI Expr RPAR StmtM                    { For($3, $5, $7, $9)        }
  | FOR Expr IN RANGE LPAR Expr COMMA Expr RPAR StmtM               { ForIn($2, $6, $8, $10)     }
  | DO StmtM WHILE LPAR Expr RPAR SEMI  { DoWhile($2, $5)      }
  | SWITCH LPAR Expr RPAR LBRACE CaseList RBRACE                    { Switch($3, $6)             }
  | SWITCH LPAR Expr RPAR LBRACE CaseList DEFAULT COLON Stmt RBRACE { SwitchDefault($3, $6, $9)  }
  | BREAK SEMI                          { Break                }
  | CONTINUE SEMI                       { Continue             }
;

CaseList:
                                        { []                   }
  | CaseDec                             { [$1]                 }
  | CaseDec CaseList                    { $1 :: $2             }

CaseDec:
    CASE Expr COLON Stmt                { ($2, $4)             }

StmtU:
    IF LPAR Expr RPAR StmtM ELSE StmtU  { If($3, $5, $7)       }
  | IF LPAR Expr RPAR Stmt              { If($3, $5, Block []) }
  | WHILE LPAR Expr RPAR StmtU          { While($3, $5)        }
;

Expr: 
    Access                              { Access $1           } //右值
  | ExprNotAccess                       { $1                  } //左值
;

ExprNotAccess:
    AtExprNotAccess                     { $1                  }
  | SELFPLUS Access                     { PreInc $2           } 
  | SELFMINUS Access                    { PreDec $2           }
  | Access SELFPLUS                     { PostInc $1          }
  | Access SELFMINUS                    { PostDec $1          }
  | Access PLUSASSIGN Expr              { AssignPrim("+=", $1, $3)   }
  | Access MINUSASSIGN Expr             { AssignPrim("-=", $1, $3)   }
  | Access TIMESASSIGN Expr             { AssignPrim("*=", $1, $3)   }
  | Access DIVASSIGN Expr               { AssignPrim("/=", $1, $3)   }
  | Access MODASSIGN Expr               { AssignPrim("%=", $1, $3)   }
  | Access ASSIGN Expr                  { Assign($1, $3)      }
  | MAX LPAR Expr COMMA Expr RPAR       { Max($3, $5)         }
  | MIN LPAR Expr COMMA Expr RPAR       { Min($3, $5)         }
  | NAME LPAR Exprs RPAR                { Call($1, $3)        }  
  | NOT Expr                            { Prim1("!", $2)      }
  | PRINT Expr                          { Prim1("printi", $2) }
  | PRINTLN                             { Prim1("printc", nl) }
  | Expr PLUS  Expr                     { Prim2("+",  $1, $3) }
  | Expr MINUS Expr                     { Prim2("-",  $1, $3) }
  | Expr TIMES Expr                     { Prim2("*",  $1, $3) }
  | Expr DIV   Expr                     { Prim2("/",  $1, $3) }
  | Expr MOD   Expr                     { Prim2("%",  $1, $3) }
  | Expr EQ    Expr                     { Prim2("==", $1, $3) }
  | Expr NE    Expr                     { Prim2("!=", $1, $3) }
  | Expr GT    Expr                     { Prim2(">",  $1, $3) }
  | Expr LT    Expr                     { Prim2("<",  $1, $3) }
  | Expr GE    Expr                     { Prim2(">=", $1, $3) }
  | Expr LE    Expr                     { Prim2("<=", $1, $3) }
  | Expr AMP Expr                       { Prim2("&",  $1, $3) }
  | Expr BITOR  Expr                    { Prim2("|",  $1, $3) }
  | Expr BITXOR Expr                    { Prim2("^",  $1, $3) }
  | Expr BITLEFT Expr                   { Prim2("<<", $1, $3) }
  | Expr BITRIGHT Expr                  { Prim2(">>", $1, $3) }
  | BITNOT Expr                         { Prim1("~",  $2)     }
  | Expr QST Expr COLON Expr        { Prim3($1, $3, $5)   }
  | Expr SEQAND Expr                    { Andalso($1, $3)     }
  | Expr SEQOR  Expr                    { Orelse($1, $3)      }
;

AtExprNotAccess:
    Const                               { CstI $1             }
  | LPAR ExprNotAccess RPAR             { $2                  } 
  | AMP Access                          { Addr $2             }
;

Access:
    NAME                                { AccVar $1           }  // 变量 x
  | LPAR Access RPAR                    { $2                  }  // 括号中的变量 (x)
  | TIMES Access                        { AccDeref (Access $2)}  // 指针  *x 
  | TIMES AtExprNotAccess               { AccDeref $2         }
  | Access LBRACK Expr RBRACK           { AccIndex($1, $3)    }   
;

Exprs:
    /* empty */                         { []       }
  | Exprs1                              { $1       }
;

Exprs1:
    Expr                                { [$1]     }
  | Expr COMMA Exprs1                   { $1 :: $3 }
;

Const:
    CSTINT                              { $1       }
  | CSTBOOL                             { $1       }
  | MINUS CSTINT                        { - $2     }
  | NULL                                { -1       }
;

Type:
    INT                                 { TypI     }
  | CHAR                                { TypC     }
;
