{
 (* File MicroC/CLex.lex
    Lexer specification for micro-C, a small imperative language
  *)

// module CLex = 
  
open FSharp.Text.Lexing
open CPar  // Token 的定义位于语法分析模块中

// 辅助函数，从lexbuf 得到当前的 词元字符串，lexeme 
let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

(* Scan keywords as identifiers and use this function to distinguish them. *)
(* If the set of keywords is large, use a hashtable instead.               *)
// keyword 处理关键字与标识符的辅助函数
let keyword s =   
    match s with
    | "char"    -> CHAR    // 返回对应的Token ,Token 定义于 CPar.fsl 文件中
    | "else"    -> ELSE
    | "false"   -> CSTBOOL 0
    | "if"      -> IF
    | "int"     -> INT
    | "null"    -> NULL
    | "print"   -> PRINT
    | "println" -> PRINTLN
    | "return"  -> RETURN
    | "true"    -> CSTBOOL 1
    | "void"    -> VOID 
    | "while"   -> WHILE
    | "for"     -> FOR
    | "do"      -> DO
    | "switch"  -> SWITCH
    | "case"    -> CASE
    | "default" -> DEFAULT
    | "break"   -> BREAK 
    | "continue"-> CONTINUE
    | "Struct"  -> STRUCT
    | "max"     -> MAX
    | "min"     -> MIN
    | "in"      -> IN
    | "range"   -> RANGE
    | _         -> NAME s   // 缺省情况，是标识符的名字，如 函数名，变量名等
                            // 当所有的关键字没有匹配成功时，则当成标识符
// 字符串转义符处理函数
let cEscape s = 
    match s with 
    | "\\\\" -> '\\'
    | "\\\"" -> '\"'
    | "\\a"  -> '\007'
    | "\\b"  -> '\008'
    | "\\t"  -> '\t'
    | "\\n"  -> '\n'
    | "\\v"  -> '\011'
    | "\\f"  -> '\012'
    | "\\r"  -> '\r'
    | _      -> failwith "Lexer error: impossible C escape"
}
                        
rule Token = parse          // 每个 规则rule 会生成为一个函数，函数名是规则名 Token
  | [' ' '\t' '\r'] { Token lexbuf } 
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
                    { keyword (lexemeAsString lexbuf) }
  | "++"            { SELFPLUS }
  | "--"            { SELFMINUS }
  | "+="            { PLUSASSIGN }
  | "-="            { MINUSASSIGN }
  | "*="            { TIMESASSIGN }
  | "/="            { DIVASSIGN }
  | "%="            { MODASSIGN }
  | '+'             { PLUS }
  | '-'             { MINUS } 
  | '*'             { TIMES } 
  | '/'             { DIV } 
  | '%'             { MOD }                     
  | '='             { ASSIGN } 
  | "=="            { EQ } 
  | "!="            { NE }
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | "||"            { SEQOR }                     
  | "&&"            { SEQAND }                     
  | "&"             { AMP }                     
  | "!"             { NOT }                     
  | '('             { LPAR }
  | ')'             { RPAR }
  | '{'             { LBRACE }
  | '}'             { RBRACE }
  | '['             { LBRACK }
  | ']'             { RBRACK }
  | ';'             { SEMI }
  | ','             { COMMA }
  | ':'             { COLON }
  | '?'             { QST }
  | "~"             { BITNOT }
  | "<<"            { BITLEFT }
  | ">>"            { BITRIGHT }
  | "^"             { BITXOR }       
  | "|"             { BITOR }
  | "//"            { EndLineComment lexbuf; Token lexbuf }
  | "/*"            { Comment lexbuf; Token lexbuf }
  | '"'             { CSTSTRING (String [] lexbuf) }
  | eof             { EOF }
  | _               { failwith "Lexer error: illegal symbol" }

and Comment = parse
   | "/*"           { Comment lexbuf; Comment lexbuf }
   | "*/"           { () }
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Comment lexbuf }
   | (eof | '\026') { failwith "Lexer error: unterminated comment" }
   | _              { Comment lexbuf }

and EndLineComment = parse
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine }
   | (eof | '\026') { () }
   | _              { EndLineComment lexbuf }

and String chars = parse 
  | '"'
      { Microsoft.FSharp.Core.String.concat "" (List.map string (List.rev chars)) } 
  | '\\' ['\\' '"' 'a' 'b' 't' 'n' 'v' 'f' 'r']
      { String (cEscape (lexemeAsString lexbuf) :: chars) lexbuf }
  | "''" 
      { String ('\'' :: chars) lexbuf }
  | '\\'
      { failwith "Lexer error: illegal escape sequence" }
  | (eof | '\026')       { failwith "Lexer error: unterminated string" } 
  | ['\n' '\r']  { failwith "Lexer error: newline in string" }

  | ['\000'-'\031' '\127' '\255']    
      { failwith "Lexer error: invalid character in string" }
  | _
      { String (char (lexbuf.LexemeChar 0) :: chars) lexbuf }
